// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String           @id @default(uuid())
  name        String
  email       String        @unique
  password    String
  role        UserRole
  maintenances Maintenance[] @relation("TechnicianMaintenance")
  equipment Equipment[]
}

model Equipment {
  id          String   @id @default(uuid())
  name        String
  description String?
  clientId    String
  client      User   @relation(fields: [clientId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())

  Maintenance Maintenance[]
}

model Maintenance {
  id          String           @id @default(uuid())
  equipment     Equipment    @relation(fields: [equipmentId], references: [id])
  equipmentId   String
  technician    User         @relation("TechnicianMaintenance", fields: [technicianId], references: [id])
  technicianId  String
  scheduledDate DateTime
  status        MaintenanceStatus
  notes         String?
  tasks         Task[]
  histories     History[]
}

model Task {
  id          String           @id @default(uuid())
  maintenance   Maintenance  @relation(fields: [maintenanceId], references: [id])
  maintenanceId String
  description   String
  completed     Boolean      @default(false)
}

model History {
  id          String           @id @default(uuid())
  maintenance   Maintenance  @relation(fields: [maintenanceId], references: [id])
  maintenanceId String
  executedAt    DateTime     @default(now())
  notes         String?
}

enum UserRole {
  admin
  technician
  client
}

enum MaintenanceStatus {
  pending
  completed
  canceled
}
